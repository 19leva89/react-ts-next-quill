generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum UploadStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

model User {
  id                     String    @id @unique @map("_id") // matches kinde user id
  email                  String    @unique
  //
  File                   File[]
  Message                Message[]
  //
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}

model File {
  id           String       @id @default(cuid()) @map("_id")
  name         String
  //
  uploadStatus UploadStatus @default(PENDING)
  //
  url          String
  key          String       @unique
  messages     Message[]
  //
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  //
  User         User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String?

  @@index([userId])
}

model Message {
  id            String   @id @default(cuid()) @map("_id")
  text          String   @db.Text()
  //
  isUserMessage Boolean
  //
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  //
  User          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String?
  //
  File          File?    @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId        String?

  @@index([userId])
  @@index([fileId])
}
